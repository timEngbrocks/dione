use crate::class_loader::parser::{Parser, U4, U2};

use self::{constants::{nop::NOP, iconst_n::{ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5}, lconst_n::{LCONST_0, LCONST_1}, fconst_n::{FCONST_0, FCONST_1, FCONST_2}, dconst_n::{DCONST_0, DCONST_1}, xpush::{BIPUSH, SIPUSH}, ldcx::{LDC, LDC_W, LDC2_W}, aconst_null::ACONST_NULL}, unimplemented_instructions::PUTSTATIC, unimplemented_instructions::GETFIELD, unimplemented_instructions::MONITOREXIT, unimplemented_instructions::PUTFIELD, unimplemented_instructions::INVOKEDYNAMIC, unimplemented_instructions::INVOKEINTERFACE, unimplemented_instructions::ANEWARRAY, unimplemented_instructions::MONITORENTER, unimplemented_instructions::INSTANCEOF, unimplemented_instructions::ARRAYLENGTH, unimplemented_instructions::CHECKCAST, unimplemented_instructions::JSR, unimplemented_instructions::RET, unimplemented_instructions::TABLESWITCH, unimplemented_instructions::LOOKUPSWITCH, unimplemented_instructions::WIDE, unimplemented_instructions::MULTIANEWARRAY, unimplemented_instructions::IFNULL, unimplemented_instructions::IFNONNULL, unimplemented_instructions::GOTO_W, unimplemented_instructions::JSR_W, unimplemented_instructions::BREAKPOINT, unimplemented_instructions::IMPDEP1, unimplemented_instructions::IMPDEP2, control::{x_return::{IRETURN, LRETURN, FRETURN, DRETURN, ARETURN, RETURN}, goto::GOTO}, loads::{aload_i::{ALOAD_0, ALOAD_1, ALOAD_2, ALOAD_3}, xload::{ILOAD, LLOAD, FLOAD, DLOAD, ALOAD}, iload_i::{ILOAD_0, ILOAD_1, ILOAD_2, ILOAD_3}, lload_i::{LLOAD_0, LLOAD_1, LLOAD_2, LLOAD_3}, fload_i::{FLOAD_0, FLOAD_1, FLOAD_2, FLOAD_3}, dload_i::{DLOAD_0, DLOAD_1, DLOAD_2, DLOAD_3}, xaload::{IALOAD, LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD}}, comparisons::{if_acmpop::{IF_ACMPEQ, IF_ACMPNE}, ifop::{IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE}, lcmp::LCMP, fcmpl::FCMPL, fcmpg::FCMPG, dcmpl::DCMPL, dcmpg::DCMPG, if_icmpop::{IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE}}, references::{new::NEW, invokespecial::INVOKESPECIAL, invokevirtual::INVOKEVIRTUAL, invokestatic::INVOKESTATIC, athrow::ATHROW, getstatic::GETSTATIC, newarray::NEWARRAY}, stack::{dup::{DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2}, swap::SWAP, pop::{POP, POP2}}, stores::{lstore_i::{LSTORE_0, LSTORE_1, LSTORE_2, LSTORE_3}, dstore_i::{DSTORE_0, DSTORE_1, DSTORE_2, DSTORE_3}, fstore_i::{FSTORE_0, FSTORE_1, FSTORE_2, FSTORE_3}, istore_i::{ISTORE_0, ISTORE_1, ISTORE_2, ISTORE_3}, astore_i::{ASTORE_0, ASTORE_1, ASTORE_2, ASTORE_3}, xstore::{ISTORE, LSTORE, FSTORE, DSTORE, ASTORE}, xastore::{IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE, SASTORE}}, math::{xadd::{IADD, LADD, FADD, DADD}, xsub::{ISUB, LSUB, FSUB, DSUB}, xmul::{IMUL, LMUL, FMUL, DMUL}, xdiv::{IDIV, LDIV, FDIV, DDIV}, xrem::{IREM, LREM, FREM, DREM}, xneg::{INEG, LNEG, FNEG, DNEG}, xshl::{ISHL, LSHL}, xshr::{ISHR, LSHR}, xushr::{IUSHR, LUSHR}, xand::{IAND, LAND}, xor::{IOR, LOR}, xxor::{IXOR, LXOR}, iinc::IINC}, conversions::x2y::{I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S}};

use super::{frame::Frame, execution_context::ExecutionContext, exception_handler::ExceptionHandlerTable};

pub mod unimplemented_instructions;

pub mod constants;
pub mod loads;
pub mod stores;
pub mod stack;
pub mod math;
pub mod conversions;
pub mod comparisons;
pub mod references;
pub mod control;
pub mod extended;
pub mod reserved;

pub trait Instruction {
    fn new(parser: &mut Parser) -> Self where Self: Sized;
    fn execute(&mut self, execution_context: &mut Frame) -> InstructionResult;
    fn length(&self) -> U2;
}

pub enum BranchKind {
    Absolute(u16),
    Relative(i16),
}

pub struct InstructionResult {
    pub call: Option<ExecutionContext>,
    pub branch: Option<BranchKind>,
    pub exception: Option<()>,
}

impl InstructionResult {
    pub fn call(execution_context: ExecutionContext) -> Self {
        InstructionResult {
            call: Some(execution_context),
            branch: None,
            exception: None,
        }
    }

    pub fn branch(branch: BranchKind) -> Self {
        InstructionResult {
            call: None,
            branch: Some(branch),
            exception: None,
        }
    }

    pub fn exception() -> Self {
        InstructionResult {
            call: None,
            branch: None,
            exception: Some(()),
        }
    }

    pub fn empty() -> Self {
        InstructionResult {
            call: None,
            branch: None,
            exception: None,
        }
    }
}

#[derive(Clone)]
pub struct InstructionStream {
    instructions: Vec<Instructions>,
    length: usize,
    cursor: usize,
    exception_handler_table: ExceptionHandlerTable,
}

impl InstructionStream {
    pub fn new_native() -> InstructionStream {
        InstructionStream {
            instructions: Vec::new(),
            length: 0,
            cursor: 0,
            exception_handler_table: ExceptionHandlerTable::new(),
        }
    }

    pub fn new(parser: &mut Parser, length: U4, exception_handler_table: ExceptionHandlerTable) -> InstructionStream {
        let mut instructions = Vec::with_capacity(length as usize);
        while parser.remaining() > 0 {
            let instruction = Instructions::new(parser);
            instructions.push(instruction);
        }
        instructions.shrink_to_fit();
        let length = instructions.len();
        InstructionStream {
            instructions,
            length,
            cursor: 0,
            exception_handler_table,
        }
    }

    pub fn has_next(&self) -> bool {
        self.cursor < self.length
    }

    pub fn next(&mut self) -> &mut Instructions {
        if !self.has_next() {
            panic!("Error handling!");
        }
        let instruction = &mut self.instructions[self.cursor];
        self.cursor += 1;
        instruction
    }

    pub fn absolute_jump(&mut self, index: usize) {
        if index >= self.length {
            panic!("Error handling!");
        }
        self.cursor = index;
    }

    pub fn relative_jump(&mut self, offset: usize) {
        self.absolute_jump(self.cursor + offset);
    }

    pub fn try_handle(&mut self, exception: &()) -> bool {
        if let Some(handler) = self.exception_handler_table.try_handle(exception) {
            self.absolute_jump(handler.handler_pc as usize);
            return true;
        }
        false
    }
}

#[derive(Clone)]
#[repr(u8)]
#[allow(non_camel_case_types)]
pub enum Instructions {
    NOP(NOP),
    ACONST_NULL(ACONST_NULL),
    ICONST_M1(ICONST_M1),
    ICONST_0(ICONST_0),
    ICONST_1(ICONST_1),
    ICONST_2(ICONST_2),
    ICONST_3(ICONST_3),
    ICONST_4(ICONST_4),
    ICONST_5(ICONST_5),
    LCONST_0(LCONST_0),
    LCONST_1(LCONST_1),
    FCONST_0(FCONST_0),
    FCONST_1(FCONST_1),
    FCONST_2(FCONST_2),
    DCONST_0(DCONST_0),
    DCONST_1(DCONST_1),
    BIPUSH(BIPUSH),
    SIPUSH(SIPUSH),
    LDC(LDC),
    LDC_W(LDC_W),
    LDC2_W(LDC2_W),
    ILOAD(ILOAD),
    LLOAD(LLOAD),
    FLOAD(FLOAD),
    DLOAD(DLOAD),
    ALOAD(ALOAD),
    ILOAD_0(ILOAD_0),
    ILOAD_1(ILOAD_1),
    ILOAD_2(ILOAD_2),
    ILOAD_3(ILOAD_3),
    LLOAD_0(LLOAD_0),
    LLOAD_1(LLOAD_1),
    LLOAD_2(LLOAD_2),
    LLOAD_3(LLOAD_3),
    FLOAD_0(FLOAD_0),
    FLOAD_1(FLOAD_1),
    FLOAD_2(FLOAD_2),
    FLOAD_3(FLOAD_3),
    DLOAD_0(DLOAD_0),
    DLOAD_1(DLOAD_1),
    DLOAD_2(DLOAD_2),
    DLOAD_3(DLOAD_3),
    ALOAD_0(ALOAD_0),
    ALOAD_1(ALOAD_1),
    ALOAD_2(ALOAD_2),
    ALOAD_3(ALOAD_3),
    IALOAD(IALOAD),
    LALOAD(LALOAD),
    FALOAD(FALOAD),
    DALOAD(DALOAD),
    AALOAD(AALOAD),
    BALOAD(BALOAD),
    CALOAD(CALOAD),
    SALOAD(SALOAD),
    ISTORE(ISTORE),
    LSTORE(LSTORE),
    FSTORE(FSTORE),
    DSTORE(DSTORE),
    ASTORE(ASTORE),
    ISTORE_0(ISTORE_0),
    ISTORE_1(ISTORE_1),
    ISTORE_2(ISTORE_2),
    ISTORE_3(ISTORE_3),
    LSTORE_0(LSTORE_0),
    LSTORE_1(LSTORE_1),
    LSTORE_2(LSTORE_2),
    LSTORE_3(LSTORE_3),
    FSTORE_0(FSTORE_0),
    FSTORE_1(FSTORE_1),
    FSTORE_2(FSTORE_2),
    FSTORE_3(FSTORE_3),
    DSTORE_0(DSTORE_0),
    DSTORE_1(DSTORE_1),
    DSTORE_2(DSTORE_2),
    DSTORE_3(DSTORE_3),
    ASTORE_0(ASTORE_0),
    ASTORE_1(ASTORE_1),
    ASTORE_2(ASTORE_2),
    ASTORE_3(ASTORE_3),
    IASTORE(IASTORE),
    LASTORE(LASTORE),
    FASTORE(FASTORE),
    DASTORE(DASTORE),
    AASTORE(AASTORE),
    BASTORE(BASTORE),
    CASTORE(CASTORE),
    SASTORE(SASTORE),
    POP(POP),
    POP2(POP2),
    DUP(DUP),
    DUP_X1(DUP_X1),
    DUP_X2(DUP_X2),
    DUP2(DUP2),
    DUP2_X1(DUP2_X1),
    DUP2_X2(DUP2_X2),
    SWAP(SWAP),
    IADD(IADD),
    LADD(LADD),
    FADD(FADD),
    DADD(DADD),
    ISUB(ISUB),
    LSUB(LSUB),
    FSUB(FSUB),
    DSUB(DSUB),
    IMUL(IMUL),
    LMUL(LMUL),
    FMUL(FMUL),
    DMUL(DMUL),
    IDIV(IDIV),
    LDIV(LDIV),
    FDIV(FDIV),
    DDIV(DDIV),
    IREM(IREM),
    LREM(LREM),
    FREM(FREM),
    DREM(DREM),
    INEG(INEG),
    LNEG(LNEG),
    FNEG(FNEG),
    DNEG(DNEG),
    ISHL(ISHL),
    LSHL(LSHL),
    ISHR(ISHR),
    LSHR(LSHR),
    IUSHR(IUSHR),
    LUSHR(LUSHR),
    IAND(IAND),
    LAND(LAND),
    IOR(IOR),
    LOR(LOR),
    IXOR(IXOR),
    LXOR(LXOR),
    IINC(IINC),
    I2L(I2L),
    I2F(I2F),
    I2D(I2D),
    L2I(L2I),
    L2F(L2F),
    L2D(L2D),
    F2I(F2I),
    F2L(F2L),
    F2D(F2D),
    D2I(D2I),
    D2L(D2L),
    D2F(D2F),
    I2B(I2B),
    I2C(I2C),
    I2S(I2S),
    LCMP(LCMP),
    FCMPL(FCMPL),
    FCMPG(FCMPG),
    DCMPL(DCMPL),
    DCMPG(DCMPG),
    IFEQ(IFEQ),
    IFNE(IFNE),
    IFLT(IFLT),
    IFGE(IFGE),
    IFGT(IFGT),
    IFLE(IFLE),
    IF_ICMPEQ(IF_ICMPEQ),
    IF_ICMPNE(IF_ICMPNE),
    IF_ICMPLT(IF_ICMPLT),
    IF_ICMPGE(IF_ICMPGE),
    IF_ICMPGT(IF_ICMPGT),
    IF_ICMPLE(IF_ICMPLE),
    IF_ACMPEQ(IF_ACMPEQ),
    IF_ACMPNE(IF_ACMPNE),
    GOTO(GOTO),
    JSR(JSR),
    RET(RET),
    TABLESWITCH(TABLESWITCH),
    LOOKUPSWITCH(LOOKUPSWITCH),
    IRETURN(IRETURN),
    LRETURN(LRETURN),
    FRETURN(FRETURN),
    DRETURN(DRETURN),
    ARETURN(ARETURN),
    RETURN(RETURN),
    GETSTATIC(GETSTATIC),
    PUTSTATIC(PUTSTATIC),
    GETFIELD(GETFIELD),
    PUTFIELD(PUTFIELD),
    INVOKEVIRTUAL(INVOKEVIRTUAL),
    INVOKESPECIAL(INVOKESPECIAL),
    INVOKESTATIC(INVOKESTATIC),
    INVOKEINTERFACE(INVOKEINTERFACE),
    INVOKEDYNAMIC(INVOKEDYNAMIC),
    NEW(NEW),
    NEWARRAY(NEWARRAY),
    ANEWARRAY(ANEWARRAY),
    ARRAYLENGTH(ARRAYLENGTH),
    ATHROW(ATHROW),
    CHECKCAST(CHECKCAST),
    INSTANCEOF(INSTANCEOF),
    MONITORENTER(MONITORENTER),
    MONITOREXIT(MONITOREXIT),
    WIDE(WIDE),
    MULTIANEWARRAY(MULTIANEWARRAY),
    IFNULL(IFNULL),
    IFNONNULL(IFNONNULL),
    GOTO_W(GOTO_W),
    JSR_W(JSR_W),
    BREAKPOINT(BREAKPOINT),
    IMPDEP1(IMPDEP1),
    IMPDEP2(IMPDEP2),
}

impl Instruction for Instructions {
    fn new(parser: &mut Parser) -> Self where Self: Sized {
        let opcode = parser.peek_u1();
        match opcode {
            0x00 => Instructions::NOP(NOP::new(parser)),
            0x01 => Instructions::ACONST_NULL(ACONST_NULL::new(parser)),
            0x02 => Instructions::ICONST_M1(ICONST_M1::new(parser)),
            0x03 => Instructions::ICONST_0(ICONST_0::new(parser)),
            0x04 => Instructions::ICONST_1(ICONST_1::new(parser)),
            0x05 => Instructions::ICONST_2(ICONST_2::new(parser)),
            0x06 => Instructions::ICONST_3(ICONST_3::new(parser)),
            0x07 => Instructions::ICONST_4(ICONST_4::new(parser)),
            0x08 => Instructions::ICONST_5(ICONST_5::new(parser)),
            0x09 => Instructions::LCONST_0(LCONST_0::new(parser)),
            0x0a => Instructions::LCONST_1(LCONST_1::new(parser)),
            0x0b => Instructions::FCONST_0(FCONST_0::new(parser)),
            0x0c => Instructions::FCONST_1(FCONST_1::new(parser)),
            0x0d => Instructions::FCONST_2(FCONST_2::new(parser)),
            0x0e => Instructions::DCONST_0(DCONST_0::new(parser)),
            0x0f => Instructions::DCONST_1(DCONST_1::new(parser)),
            0x10 => Instructions::BIPUSH(BIPUSH::new(parser)),
            0x11 => Instructions::SIPUSH(SIPUSH::new(parser)),
            0x12 => Instructions::LDC(LDC::new(parser)),
            0x13 => Instructions::LDC_W(LDC_W::new(parser)),
            0x14 => Instructions::LDC2_W(LDC2_W::new(parser)),
            0x15 => Instructions::ILOAD(ILOAD::new(parser)),
            0x16 => Instructions::LLOAD(LLOAD::new(parser)),
            0x17 => Instructions::FLOAD(FLOAD::new(parser)),
            0x18 => Instructions::DLOAD(DLOAD::new(parser)),
            0x19 => Instructions::ALOAD(ALOAD::new(parser)),
            0x1a => Instructions::ILOAD_0(ILOAD_0::new(parser)),
            0x1b => Instructions::ILOAD_1(ILOAD_1::new(parser)),
            0x1c => Instructions::ILOAD_2(ILOAD_2::new(parser)),
            0x1d => Instructions::ILOAD_3(ILOAD_3::new(parser)),
            0x1e => Instructions::LLOAD_0(LLOAD_0::new(parser)),
            0x1f => Instructions::LLOAD_1(LLOAD_1::new(parser)),
            0x20 => Instructions::LLOAD_2(LLOAD_2::new(parser)),
            0x21 => Instructions::LLOAD_3(LLOAD_3::new(parser)),
            0x22 => Instructions::FLOAD_0(FLOAD_0::new(parser)),
            0x23 => Instructions::FLOAD_1(FLOAD_1::new(parser)),
            0x24 => Instructions::FLOAD_2(FLOAD_2::new(parser)),
            0x25 => Instructions::FLOAD_3(FLOAD_3::new(parser)),
            0x26 => Instructions::DLOAD_0(DLOAD_0::new(parser)),
            0x27 => Instructions::DLOAD_1(DLOAD_1::new(parser)),
            0x28 => Instructions::DLOAD_2(DLOAD_2::new(parser)),
            0x29 => Instructions::DLOAD_3(DLOAD_3::new(parser)),
            0x2a => Instructions::ALOAD_0(ALOAD_0::new(parser)),
            0x2b => Instructions::ALOAD_1(ALOAD_1::new(parser)),
            0x2c => Instructions::ALOAD_2(ALOAD_2::new(parser)),
            0x2d => Instructions::ALOAD_3(ALOAD_3::new(parser)),
            0x2e => Instructions::IALOAD(IALOAD::new(parser)),
            0x2f => Instructions::LALOAD(LALOAD::new(parser)),
            0x30 => Instructions::FALOAD(FALOAD::new(parser)),
            0x31 => Instructions::DALOAD(DALOAD::new(parser)),
            0x32 => Instructions::AALOAD(AALOAD::new(parser)),
            0x33 => Instructions::BALOAD(BALOAD::new(parser)),
            0x34 => Instructions::CALOAD(CALOAD::new(parser)),
            0x35 => Instructions::SALOAD(SALOAD::new(parser)),
            0x36 => Instructions::ISTORE(ISTORE::new(parser)),
            0x37 => Instructions::LSTORE(LSTORE::new(parser)),
            0x38 => Instructions::FSTORE(FSTORE::new(parser)),
            0x39 => Instructions::DSTORE(DSTORE::new(parser)),
            0x3a => Instructions::ASTORE(ASTORE::new(parser)),
            0x3b => Instructions::ISTORE_0(ISTORE_0::new(parser)),
            0x3c => Instructions::ISTORE_1(ISTORE_1::new(parser)),
            0x3d => Instructions::ISTORE_2(ISTORE_2::new(parser)),
            0x3e => Instructions::ISTORE_3(ISTORE_3::new(parser)),
            0x3f => Instructions::LSTORE_0(LSTORE_0::new(parser)),
            0x40 => Instructions::LSTORE_1(LSTORE_1::new(parser)),
            0x41 => Instructions::LSTORE_2(LSTORE_2::new(parser)),
            0x42 => Instructions::LSTORE_3(LSTORE_3::new(parser)),
            0x43 => Instructions::FSTORE_0(FSTORE_0::new(parser)),
            0x44 => Instructions::FSTORE_1(FSTORE_1::new(parser)),
            0x45 => Instructions::FSTORE_2(FSTORE_2::new(parser)),
            0x46 => Instructions::FSTORE_3(FSTORE_3::new(parser)),
            0x47 => Instructions::DSTORE_0(DSTORE_0::new(parser)),
            0x48 => Instructions::DSTORE_1(DSTORE_1::new(parser)),
            0x49 => Instructions::DSTORE_2(DSTORE_2::new(parser)),
            0x4a => Instructions::DSTORE_3(DSTORE_3::new(parser)),
            0x4b => Instructions::ASTORE_0(ASTORE_0::new(parser)),
            0x4c => Instructions::ASTORE_1(ASTORE_1::new(parser)),
            0x4d => Instructions::ASTORE_2(ASTORE_2::new(parser)),
            0x4e => Instructions::ASTORE_3(ASTORE_3::new(parser)),
            0x4f => Instructions::IASTORE(IASTORE::new(parser)),
            0x50 => Instructions::LASTORE(LASTORE::new(parser)),
            0x51 => Instructions::FASTORE(FASTORE::new(parser)),
            0x52 => Instructions::DASTORE(DASTORE::new(parser)),
            0x53 => Instructions::AASTORE(AASTORE::new(parser)),
            0x54 => Instructions::BASTORE(BASTORE::new(parser)),
            0x55 => Instructions::CASTORE(CASTORE::new(parser)),
            0x56 => Instructions::SASTORE(SASTORE::new(parser)),
            0x57 => Instructions::POP(POP::new(parser)),
            0x58 => Instructions::POP2(POP2::new(parser)),
            0x59 => Instructions::DUP(DUP::new(parser)),
            0x5a => Instructions::DUP_X1(DUP_X1::new(parser)),
            0x5b => Instructions::DUP_X2(DUP_X2::new(parser)),
            0x5c => Instructions::DUP2(DUP2::new(parser)),
            0x5d => Instructions::DUP2_X1(DUP2_X1::new(parser)),
            0x5e => Instructions::DUP2_X2(DUP2_X2::new(parser)),
            0x5f => Instructions::SWAP(SWAP::new(parser)),
            0x60 => Instructions::IADD(IADD::new(parser)),
            0x61 => Instructions::LADD(LADD::new(parser)),
            0x62 => Instructions::FADD(FADD::new(parser)),
            0x63 => Instructions::DADD(DADD::new(parser)),
            0x64 => Instructions::ISUB(ISUB::new(parser)),
            0x65 => Instructions::LSUB(LSUB::new(parser)),
            0x66 => Instructions::FSUB(FSUB::new(parser)),
            0x67 => Instructions::DSUB(DSUB::new(parser)),
            0x68 => Instructions::IMUL(IMUL::new(parser)),
            0x69 => Instructions::LMUL(LMUL::new(parser)),
            0x6a => Instructions::FMUL(FMUL::new(parser)),
            0x6b => Instructions::DMUL(DMUL::new(parser)),
            0x6c => Instructions::IDIV(IDIV::new(parser)),
            0x6d => Instructions::LDIV(LDIV::new(parser)),
            0x6e => Instructions::FDIV(FDIV::new(parser)),
            0x6f => Instructions::DDIV(DDIV::new(parser)),
            0x70 => Instructions::IREM(IREM::new(parser)),
            0x71 => Instructions::LREM(LREM::new(parser)),
            0x72 => Instructions::FREM(FREM::new(parser)),
            0x73 => Instructions::DREM(DREM::new(parser)),
            0x74 => Instructions::INEG(INEG::new(parser)),
            0x75 => Instructions::LNEG(LNEG::new(parser)),
            0x76 => Instructions::FNEG(FNEG::new(parser)),
            0x77 => Instructions::DNEG(DNEG::new(parser)),
            0x78 => Instructions::ISHL(ISHL::new(parser)),
            0x79 => Instructions::LSHL(LSHL::new(parser)),
            0x7a => Instructions::ISHR(ISHR::new(parser)),
            0x7b => Instructions::LSHR(LSHR::new(parser)),
            0x7c => Instructions::IUSHR(IUSHR::new(parser)),
            0x7d => Instructions::LUSHR(LUSHR::new(parser)),
            0x7e => Instructions::IAND(IAND::new(parser)),
            0x7f => Instructions::LAND(LAND::new(parser)),
            0x80 => Instructions::IOR(IOR::new(parser)),
            0x81 => Instructions::LOR(LOR::new(parser)),
            0x82 => Instructions::IXOR(IXOR::new(parser)),
            0x83 => Instructions::LXOR(LXOR::new(parser)),
            0x84 => Instructions::IINC(IINC::new(parser)),
            0x85 => Instructions::I2L(I2L::new(parser)),
            0x86 => Instructions::I2F(I2F::new(parser)),
            0x87 => Instructions::I2D(I2D::new(parser)),
            0x88 => Instructions::L2I(L2I::new(parser)),
            0x89 => Instructions::L2F(L2F::new(parser)),
            0x8a => Instructions::L2D(L2D::new(parser)),
            0x8b => Instructions::F2I(F2I::new(parser)),
            0x8c => Instructions::F2L(F2L::new(parser)),
            0x8d => Instructions::F2D(F2D::new(parser)),
            0x8e => Instructions::D2I(D2I::new(parser)),
            0x8f => Instructions::D2L(D2L::new(parser)),
            0x90 => Instructions::D2F(D2F::new(parser)),
            0x91 => Instructions::I2B(I2B::new(parser)),
            0x92 => Instructions::I2C(I2C::new(parser)),
            0x93 => Instructions::I2S(I2S::new(parser)),
            0x94 => Instructions::LCMP(LCMP::new(parser)),
            0x95 => Instructions::FCMPL(FCMPL::new(parser)),
            0x96 => Instructions::FCMPG(FCMPG::new(parser)),
            0x97 => Instructions::DCMPL(DCMPL::new(parser)),
            0x98 => Instructions::DCMPG(DCMPG::new(parser)),
            0x99 => Instructions::IFEQ(IFEQ::new(parser)),
            0x9a => Instructions::IFNE(IFNE::new(parser)),
            0x9b => Instructions::IFLT(IFLT::new(parser)),
            0x9c => Instructions::IFGE(IFGE::new(parser)),
            0x9d => Instructions::IFGT(IFGT::new(parser)),
            0x9e => Instructions::IFLE(IFLE::new(parser)),
            0x9f => Instructions::IF_ICMPEQ(IF_ICMPEQ::new(parser)),
            0xa0 => Instructions::IF_ICMPNE(IF_ICMPNE::new(parser)),
            0xa1 => Instructions::IF_ICMPLT(IF_ICMPLT::new(parser)),
            0xa2 => Instructions::IF_ICMPGE(IF_ICMPGE::new(parser)),
            0xa3 => Instructions::IF_ICMPGT(IF_ICMPGT::new(parser)),
            0xa4 => Instructions::IF_ICMPLE(IF_ICMPLE::new(parser)),
            0xa5 => Instructions::IF_ACMPEQ(IF_ACMPEQ::new(parser)),
            0xa6 => Instructions::IF_ACMPNE(IF_ACMPNE::new(parser)),
            0xa7 => Instructions::GOTO(GOTO::new(parser)),
            0xa8 => Instructions::JSR(JSR::new(parser)),
            0xa9 => Instructions::RET(RET::new(parser)),
            0xaa => Instructions::TABLESWITCH(TABLESWITCH::new(parser)),
            0xab => Instructions::LOOKUPSWITCH(LOOKUPSWITCH::new(parser)),
            0xac => Instructions::IRETURN(IRETURN::new(parser)),
            0xad => Instructions::LRETURN(LRETURN::new(parser)),
            0xae => Instructions::FRETURN(FRETURN::new(parser)),
            0xaf => Instructions::DRETURN(DRETURN::new(parser)),
            0xb0 => Instructions::ARETURN(ARETURN::new(parser)),
            0xb1 => Instructions::RETURN(RETURN::new(parser)),
            0xb2 => Instructions::GETSTATIC(GETSTATIC::new(parser)),
            0xb3 => Instructions::PUTSTATIC(PUTSTATIC::new(parser)),
            0xb4 => Instructions::GETFIELD(GETFIELD::new(parser)),
            0xb5 => Instructions::PUTFIELD(PUTFIELD::new(parser)),
            0xb6 => Instructions::INVOKEVIRTUAL(INVOKEVIRTUAL::new(parser)),
            0xb7 => Instructions::INVOKESPECIAL(INVOKESPECIAL::new(parser)),
            0xb8 => Instructions::INVOKESTATIC(INVOKESTATIC::new(parser)),
            0xb9 => Instructions::INVOKEINTERFACE(INVOKEINTERFACE::new(parser)),
            0xba => Instructions::INVOKEDYNAMIC(INVOKEDYNAMIC::new(parser)),
            0xbb => Instructions::NEW(NEW::new(parser)),
            0xbc => Instructions::NEWARRAY(NEWARRAY::new(parser)),
            0xbd => Instructions::ANEWARRAY(ANEWARRAY::new(parser)),
            0xbe => Instructions::ARRAYLENGTH(ARRAYLENGTH::new(parser)),
            0xbf => Instructions::ATHROW(ATHROW::new(parser)),
            0xc0 => Instructions::CHECKCAST(CHECKCAST::new(parser)),
            0xc1 => Instructions::INSTANCEOF(INSTANCEOF::new(parser)),
            0xc2 => Instructions::MONITORENTER(MONITORENTER::new(parser)),
            0xc3 => Instructions::MONITOREXIT(MONITOREXIT::new(parser)),
            0xc4 => Instructions::WIDE(WIDE::new(parser)),
            0xc5 => Instructions::MULTIANEWARRAY(MULTIANEWARRAY::new(parser)),
            0xc6 => Instructions::IFNULL(IFNULL::new(parser)),
            0xc7 => Instructions::IFNONNULL(IFNONNULL::new(parser)),
            0xc8 => Instructions::GOTO_W(GOTO_W::new(parser)),
            0xc9 => Instructions::JSR_W(JSR_W::new(parser)),
            0xca => Instructions::BREAKPOINT(BREAKPOINT::new(parser)),
            0xfe => Instructions::IMPDEP1(IMPDEP1::new(parser)),
            0xff => Instructions::IMPDEP2(IMPDEP2::new(parser)),
            v => panic!("Unknown opcode: {v}")
        }
    }

    fn execute(&mut self, execution_context: &mut Frame) -> InstructionResult {
        match self {
            Instructions::NOP(instruction) => instruction.execute(execution_context),
            Instructions::ACONST_NULL(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_M1(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_0(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_1(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_2(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_3(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_4(instruction) => instruction.execute(execution_context),
            Instructions::ICONST_5(instruction) => instruction.execute(execution_context),
            Instructions::LCONST_0(instruction) => instruction.execute(execution_context),
            Instructions::LCONST_1(instruction) => instruction.execute(execution_context),
            Instructions::FCONST_0(instruction) => instruction.execute(execution_context),
            Instructions::FCONST_1(instruction) => instruction.execute(execution_context),
            Instructions::FCONST_2(instruction) => instruction.execute(execution_context),
            Instructions::DCONST_0(instruction) => instruction.execute(execution_context),
            Instructions::DCONST_1(instruction) => instruction.execute(execution_context),
            Instructions::BIPUSH(instruction) => instruction.execute(execution_context),
            Instructions::SIPUSH(instruction) => instruction.execute(execution_context),
            Instructions::LDC(instruction) => instruction.execute(execution_context),
            Instructions::LDC_W(instruction) => instruction.execute(execution_context),
            Instructions::LDC2_W(instruction) => instruction.execute(execution_context),
            Instructions::ILOAD(instruction) => instruction.execute(execution_context),
            Instructions::LLOAD(instruction) => instruction.execute(execution_context),
            Instructions::FLOAD(instruction) => instruction.execute(execution_context),
            Instructions::DLOAD(instruction) => instruction.execute(execution_context),
            Instructions::ALOAD(instruction) => instruction.execute(execution_context),
            Instructions::ILOAD_0(instruction) => instruction.execute(execution_context),
            Instructions::ILOAD_1(instruction) => instruction.execute(execution_context),
            Instructions::ILOAD_2(instruction) => instruction.execute(execution_context),
            Instructions::ILOAD_3(instruction) => instruction.execute(execution_context),
            Instructions::LLOAD_0(instruction) => instruction.execute(execution_context),
            Instructions::LLOAD_1(instruction) => instruction.execute(execution_context),
            Instructions::LLOAD_2(instruction) => instruction.execute(execution_context),
            Instructions::LLOAD_3(instruction) => instruction.execute(execution_context),
            Instructions::FLOAD_0(instruction) => instruction.execute(execution_context),
            Instructions::FLOAD_1(instruction) => instruction.execute(execution_context),
            Instructions::FLOAD_2(instruction) => instruction.execute(execution_context),
            Instructions::FLOAD_3(instruction) => instruction.execute(execution_context),
            Instructions::DLOAD_0(instruction) => instruction.execute(execution_context),
            Instructions::DLOAD_1(instruction) => instruction.execute(execution_context),
            Instructions::DLOAD_2(instruction) => instruction.execute(execution_context),
            Instructions::DLOAD_3(instruction) => instruction.execute(execution_context),
            Instructions::ALOAD_0(instruction) => instruction.execute(execution_context),
            Instructions::ALOAD_1(instruction) => instruction.execute(execution_context),
            Instructions::ALOAD_2(instruction) => instruction.execute(execution_context),
            Instructions::ALOAD_3(instruction) => instruction.execute(execution_context),
            Instructions::IALOAD(instruction) => instruction.execute(execution_context),
            Instructions::LALOAD(instruction) => instruction.execute(execution_context),
            Instructions::FALOAD(instruction) => instruction.execute(execution_context),
            Instructions::DALOAD(instruction) => instruction.execute(execution_context),
            Instructions::AALOAD(instruction) => instruction.execute(execution_context),
            Instructions::BALOAD(instruction) => instruction.execute(execution_context),
            Instructions::CALOAD(instruction) => instruction.execute(execution_context),
            Instructions::SALOAD(instruction) => instruction.execute(execution_context),
            Instructions::ISTORE(instruction) => instruction.execute(execution_context),
            Instructions::LSTORE(instruction) => instruction.execute(execution_context),
            Instructions::FSTORE(instruction) => instruction.execute(execution_context),
            Instructions::DSTORE(instruction) => instruction.execute(execution_context),
            Instructions::ASTORE(instruction) => instruction.execute(execution_context),
            Instructions::ISTORE_0(instruction) => instruction.execute(execution_context),
            Instructions::ISTORE_1(instruction) => instruction.execute(execution_context),
            Instructions::ISTORE_2(instruction) => instruction.execute(execution_context),
            Instructions::ISTORE_3(instruction) => instruction.execute(execution_context),
            Instructions::LSTORE_0(instruction) => instruction.execute(execution_context),
            Instructions::LSTORE_1(instruction) => instruction.execute(execution_context),
            Instructions::LSTORE_2(instruction) => instruction.execute(execution_context),
            Instructions::LSTORE_3(instruction) => instruction.execute(execution_context),
            Instructions::FSTORE_0(instruction) => instruction.execute(execution_context),
            Instructions::FSTORE_1(instruction) => instruction.execute(execution_context),
            Instructions::FSTORE_2(instruction) => instruction.execute(execution_context),
            Instructions::FSTORE_3(instruction) => instruction.execute(execution_context),
            Instructions::DSTORE_0(instruction) => instruction.execute(execution_context),
            Instructions::DSTORE_1(instruction) => instruction.execute(execution_context),
            Instructions::DSTORE_2(instruction) => instruction.execute(execution_context),
            Instructions::DSTORE_3(instruction) => instruction.execute(execution_context),
            Instructions::ASTORE_0(instruction) => instruction.execute(execution_context),
            Instructions::ASTORE_1(instruction) => instruction.execute(execution_context),
            Instructions::ASTORE_2(instruction) => instruction.execute(execution_context),
            Instructions::ASTORE_3(instruction) => instruction.execute(execution_context),
            Instructions::IASTORE(instruction) => instruction.execute(execution_context),
            Instructions::LASTORE(instruction) => instruction.execute(execution_context),
            Instructions::FASTORE(instruction) => instruction.execute(execution_context),
            Instructions::DASTORE(instruction) => instruction.execute(execution_context),
            Instructions::AASTORE(instruction) => instruction.execute(execution_context),
            Instructions::BASTORE(instruction) => instruction.execute(execution_context),
            Instructions::CASTORE(instruction) => instruction.execute(execution_context),
            Instructions::SASTORE(instruction) => instruction.execute(execution_context),
            Instructions::POP(instruction) => instruction.execute(execution_context),
            Instructions::POP2(instruction) => instruction.execute(execution_context),
            Instructions::DUP(instruction) => instruction.execute(execution_context),
            Instructions::DUP_X1(instruction) => instruction.execute(execution_context),
            Instructions::DUP_X2(instruction) => instruction.execute(execution_context),
            Instructions::DUP2(instruction) => instruction.execute(execution_context),
            Instructions::DUP2_X1(instruction) => instruction.execute(execution_context),
            Instructions::DUP2_X2(instruction) => instruction.execute(execution_context),
            Instructions::SWAP(instruction) => instruction.execute(execution_context),
            Instructions::IADD(instruction) => instruction.execute(execution_context),
            Instructions::LADD(instruction) => instruction.execute(execution_context),
            Instructions::FADD(instruction) => instruction.execute(execution_context),
            Instructions::DADD(instruction) => instruction.execute(execution_context),
            Instructions::ISUB(instruction) => instruction.execute(execution_context),
            Instructions::LSUB(instruction) => instruction.execute(execution_context),
            Instructions::FSUB(instruction) => instruction.execute(execution_context),
            Instructions::DSUB(instruction) => instruction.execute(execution_context),
            Instructions::IMUL(instruction) => instruction.execute(execution_context),
            Instructions::LMUL(instruction) => instruction.execute(execution_context),
            Instructions::FMUL(instruction) => instruction.execute(execution_context),
            Instructions::DMUL(instruction) => instruction.execute(execution_context),
            Instructions::IDIV(instruction) => instruction.execute(execution_context),
            Instructions::LDIV(instruction) => instruction.execute(execution_context),
            Instructions::FDIV(instruction) => instruction.execute(execution_context),
            Instructions::DDIV(instruction) => instruction.execute(execution_context),
            Instructions::IREM(instruction) => instruction.execute(execution_context),
            Instructions::LREM(instruction) => instruction.execute(execution_context),
            Instructions::FREM(instruction) => instruction.execute(execution_context),
            Instructions::DREM(instruction) => instruction.execute(execution_context),
            Instructions::INEG(instruction) => instruction.execute(execution_context),
            Instructions::LNEG(instruction) => instruction.execute(execution_context),
            Instructions::FNEG(instruction) => instruction.execute(execution_context),
            Instructions::DNEG(instruction) => instruction.execute(execution_context),
            Instructions::ISHL(instruction) => instruction.execute(execution_context),
            Instructions::LSHL(instruction) => instruction.execute(execution_context),
            Instructions::ISHR(instruction) => instruction.execute(execution_context),
            Instructions::LSHR(instruction) => instruction.execute(execution_context),
            Instructions::IUSHR(instruction) => instruction.execute(execution_context),
            Instructions::LUSHR(instruction) => instruction.execute(execution_context),
            Instructions::IAND(instruction) => instruction.execute(execution_context),
            Instructions::LAND(instruction) => instruction.execute(execution_context),
            Instructions::IOR(instruction) => instruction.execute(execution_context),
            Instructions::LOR(instruction) => instruction.execute(execution_context),
            Instructions::IXOR(instruction) => instruction.execute(execution_context),
            Instructions::LXOR(instruction) => instruction.execute(execution_context),
            Instructions::IINC(instruction) => instruction.execute(execution_context),
            Instructions::I2L(instruction) => instruction.execute(execution_context),
            Instructions::I2F(instruction) => instruction.execute(execution_context),
            Instructions::I2D(instruction) => instruction.execute(execution_context),
            Instructions::L2I(instruction) => instruction.execute(execution_context),
            Instructions::L2F(instruction) => instruction.execute(execution_context),
            Instructions::L2D(instruction) => instruction.execute(execution_context),
            Instructions::F2I(instruction) => instruction.execute(execution_context),
            Instructions::F2L(instruction) => instruction.execute(execution_context),
            Instructions::F2D(instruction) => instruction.execute(execution_context),
            Instructions::D2I(instruction) => instruction.execute(execution_context),
            Instructions::D2L(instruction) => instruction.execute(execution_context),
            Instructions::D2F(instruction) => instruction.execute(execution_context),
            Instructions::I2B(instruction) => instruction.execute(execution_context),
            Instructions::I2C(instruction) => instruction.execute(execution_context),
            Instructions::I2S(instruction) => instruction.execute(execution_context),
            Instructions::LCMP(instruction) => instruction.execute(execution_context),
            Instructions::FCMPL(instruction) => instruction.execute(execution_context),
            Instructions::FCMPG(instruction) => instruction.execute(execution_context),
            Instructions::DCMPL(instruction) => instruction.execute(execution_context),
            Instructions::DCMPG(instruction) => instruction.execute(execution_context),
            Instructions::IFEQ(instruction) => instruction.execute(execution_context),
            Instructions::IFNE(instruction) => instruction.execute(execution_context),
            Instructions::IFLT(instruction) => instruction.execute(execution_context),
            Instructions::IFGE(instruction) => instruction.execute(execution_context),
            Instructions::IFGT(instruction) => instruction.execute(execution_context),
            Instructions::IFLE(instruction) => instruction.execute(execution_context),
            Instructions::IF_ICMPEQ(instruction) => instruction.execute(execution_context),
            Instructions::IF_ICMPNE(instruction) => instruction.execute(execution_context),
            Instructions::IF_ICMPLT(instruction) => instruction.execute(execution_context),
            Instructions::IF_ICMPGE(instruction) => instruction.execute(execution_context),
            Instructions::IF_ICMPGT(instruction) => instruction.execute(execution_context),
            Instructions::IF_ICMPLE(instruction) => instruction.execute(execution_context),
            Instructions::IF_ACMPEQ(instruction) => instruction.execute(execution_context),
            Instructions::IF_ACMPNE(instruction) => instruction.execute(execution_context),
            Instructions::GOTO(instruction) => instruction.execute(execution_context),
            Instructions::JSR(instruction) => instruction.execute(execution_context),
            Instructions::RET(instruction) => instruction.execute(execution_context),
            Instructions::TABLESWITCH(instruction) => instruction.execute(execution_context),
            Instructions::LOOKUPSWITCH(instruction) => instruction.execute(execution_context),
            Instructions::IRETURN(instruction) => instruction.execute(execution_context),
            Instructions::LRETURN(instruction) => instruction.execute(execution_context),
            Instructions::FRETURN(instruction) => instruction.execute(execution_context),
            Instructions::DRETURN(instruction) => instruction.execute(execution_context),
            Instructions::ARETURN(instruction) => instruction.execute(execution_context),
            Instructions::RETURN(instruction) => instruction.execute(execution_context),
            Instructions::GETSTATIC(instruction) => instruction.execute(execution_context),
            Instructions::PUTSTATIC(instruction) => instruction.execute(execution_context),
            Instructions::GETFIELD(instruction) => instruction.execute(execution_context),
            Instructions::PUTFIELD(instruction) => instruction.execute(execution_context),
            Instructions::INVOKEVIRTUAL(instruction) => instruction.execute(execution_context),
            Instructions::INVOKESPECIAL(instruction) => instruction.execute(execution_context),
            Instructions::INVOKESTATIC(instruction) => instruction.execute(execution_context),
            Instructions::INVOKEINTERFACE(instruction) => instruction.execute(execution_context),
            Instructions::INVOKEDYNAMIC(instruction) => instruction.execute(execution_context),
            Instructions::NEW(instruction) => instruction.execute(execution_context),
            Instructions::NEWARRAY(instruction) => instruction.execute(execution_context),
            Instructions::ANEWARRAY(instruction) => instruction.execute(execution_context),
            Instructions::ARRAYLENGTH(instruction) => instruction.execute(execution_context),
            Instructions::ATHROW(instruction) => instruction.execute(execution_context),
            Instructions::CHECKCAST(instruction) => instruction.execute(execution_context),
            Instructions::INSTANCEOF(instruction) => instruction.execute(execution_context),
            Instructions::MONITORENTER(instruction) => instruction.execute(execution_context),
            Instructions::MONITOREXIT(instruction) => instruction.execute(execution_context),
            Instructions::WIDE(instruction) => instruction.execute(execution_context),
            Instructions::MULTIANEWARRAY(instruction) => instruction.execute(execution_context),
            Instructions::IFNULL(instruction) => instruction.execute(execution_context),
            Instructions::IFNONNULL(instruction) => instruction.execute(execution_context),
            Instructions::GOTO_W(instruction) => instruction.execute(execution_context),
            Instructions::JSR_W(instruction) => instruction.execute(execution_context),
            Instructions::BREAKPOINT(instruction) => instruction.execute(execution_context),
            Instructions::IMPDEP1(instruction) => instruction.execute(execution_context),
            Instructions::IMPDEP2(instruction) => instruction.execute(execution_context),
                    }
    }

    fn length(&self) -> U2 {
        match self {
            Instructions::NOP(instruction) => instruction.length(),
            Instructions::ACONST_NULL(instruction) => instruction.length(),
            Instructions::ICONST_M1(instruction) => instruction.length(),
            Instructions::ICONST_0(instruction) => instruction.length(),
            Instructions::ICONST_1(instruction) => instruction.length(),
            Instructions::ICONST_2(instruction) => instruction.length(),
            Instructions::ICONST_3(instruction) => instruction.length(),
            Instructions::ICONST_4(instruction) => instruction.length(),
            Instructions::ICONST_5(instruction) => instruction.length(),
            Instructions::LCONST_0(instruction) => instruction.length(),
            Instructions::LCONST_1(instruction) => instruction.length(),
            Instructions::FCONST_0(instruction) => instruction.length(),
            Instructions::FCONST_1(instruction) => instruction.length(),
            Instructions::FCONST_2(instruction) => instruction.length(),
            Instructions::DCONST_0(instruction) => instruction.length(),
            Instructions::DCONST_1(instruction) => instruction.length(),
            Instructions::BIPUSH(instruction) => instruction.length(),
            Instructions::SIPUSH(instruction) => instruction.length(),
            Instructions::LDC(instruction) => instruction.length(),
            Instructions::LDC_W(instruction) => instruction.length(),
            Instructions::LDC2_W(instruction) => instruction.length(),
            Instructions::ILOAD(instruction) => instruction.length(),
            Instructions::LLOAD(instruction) => instruction.length(),
            Instructions::FLOAD(instruction) => instruction.length(),
            Instructions::DLOAD(instruction) => instruction.length(),
            Instructions::ALOAD(instruction) => instruction.length(),
            Instructions::ILOAD_0(instruction) => instruction.length(),
            Instructions::ILOAD_1(instruction) => instruction.length(),
            Instructions::ILOAD_2(instruction) => instruction.length(),
            Instructions::ILOAD_3(instruction) => instruction.length(),
            Instructions::LLOAD_0(instruction) => instruction.length(),
            Instructions::LLOAD_1(instruction) => instruction.length(),
            Instructions::LLOAD_2(instruction) => instruction.length(),
            Instructions::LLOAD_3(instruction) => instruction.length(),
            Instructions::FLOAD_0(instruction) => instruction.length(),
            Instructions::FLOAD_1(instruction) => instruction.length(),
            Instructions::FLOAD_2(instruction) => instruction.length(),
            Instructions::FLOAD_3(instruction) => instruction.length(),
            Instructions::DLOAD_0(instruction) => instruction.length(),
            Instructions::DLOAD_1(instruction) => instruction.length(),
            Instructions::DLOAD_2(instruction) => instruction.length(),
            Instructions::DLOAD_3(instruction) => instruction.length(),
            Instructions::ALOAD_0(instruction) => instruction.length(),
            Instructions::ALOAD_1(instruction) => instruction.length(),
            Instructions::ALOAD_2(instruction) => instruction.length(),
            Instructions::ALOAD_3(instruction) => instruction.length(),
            Instructions::IALOAD(instruction) => instruction.length(),
            Instructions::LALOAD(instruction) => instruction.length(),
            Instructions::FALOAD(instruction) => instruction.length(),
            Instructions::DALOAD(instruction) => instruction.length(),
            Instructions::AALOAD(instruction) => instruction.length(),
            Instructions::BALOAD(instruction) => instruction.length(),
            Instructions::CALOAD(instruction) => instruction.length(),
            Instructions::SALOAD(instruction) => instruction.length(),
            Instructions::ISTORE(instruction) => instruction.length(),
            Instructions::LSTORE(instruction) => instruction.length(),
            Instructions::FSTORE(instruction) => instruction.length(),
            Instructions::DSTORE(instruction) => instruction.length(),
            Instructions::ASTORE(instruction) => instruction.length(),
            Instructions::ISTORE_0(instruction) => instruction.length(),
            Instructions::ISTORE_1(instruction) => instruction.length(),
            Instructions::ISTORE_2(instruction) => instruction.length(),
            Instructions::ISTORE_3(instruction) => instruction.length(),
            Instructions::LSTORE_0(instruction) => instruction.length(),
            Instructions::LSTORE_1(instruction) => instruction.length(),
            Instructions::LSTORE_2(instruction) => instruction.length(),
            Instructions::LSTORE_3(instruction) => instruction.length(),
            Instructions::FSTORE_0(instruction) => instruction.length(),
            Instructions::FSTORE_1(instruction) => instruction.length(),
            Instructions::FSTORE_2(instruction) => instruction.length(),
            Instructions::FSTORE_3(instruction) => instruction.length(),
            Instructions::DSTORE_0(instruction) => instruction.length(),
            Instructions::DSTORE_1(instruction) => instruction.length(),
            Instructions::DSTORE_2(instruction) => instruction.length(),
            Instructions::DSTORE_3(instruction) => instruction.length(),
            Instructions::ASTORE_0(instruction) => instruction.length(),
            Instructions::ASTORE_1(instruction) => instruction.length(),
            Instructions::ASTORE_2(instruction) => instruction.length(),
            Instructions::ASTORE_3(instruction) => instruction.length(),
            Instructions::IASTORE(instruction) => instruction.length(),
            Instructions::LASTORE(instruction) => instruction.length(),
            Instructions::FASTORE(instruction) => instruction.length(),
            Instructions::DASTORE(instruction) => instruction.length(),
            Instructions::AASTORE(instruction) => instruction.length(),
            Instructions::BASTORE(instruction) => instruction.length(),
            Instructions::CASTORE(instruction) => instruction.length(),
            Instructions::SASTORE(instruction) => instruction.length(),
            Instructions::POP(instruction) => instruction.length(),
            Instructions::POP2(instruction) => instruction.length(),
            Instructions::DUP(instruction) => instruction.length(),
            Instructions::DUP_X1(instruction) => instruction.length(),
            Instructions::DUP_X2(instruction) => instruction.length(),
            Instructions::DUP2(instruction) => instruction.length(),
            Instructions::DUP2_X1(instruction) => instruction.length(),
            Instructions::DUP2_X2(instruction) => instruction.length(),
            Instructions::SWAP(instruction) => instruction.length(),
            Instructions::IADD(instruction) => instruction.length(),
            Instructions::LADD(instruction) => instruction.length(),
            Instructions::FADD(instruction) => instruction.length(),
            Instructions::DADD(instruction) => instruction.length(),
            Instructions::ISUB(instruction) => instruction.length(),
            Instructions::LSUB(instruction) => instruction.length(),
            Instructions::FSUB(instruction) => instruction.length(),
            Instructions::DSUB(instruction) => instruction.length(),
            Instructions::IMUL(instruction) => instruction.length(),
            Instructions::LMUL(instruction) => instruction.length(),
            Instructions::FMUL(instruction) => instruction.length(),
            Instructions::DMUL(instruction) => instruction.length(),
            Instructions::IDIV(instruction) => instruction.length(),
            Instructions::LDIV(instruction) => instruction.length(),
            Instructions::FDIV(instruction) => instruction.length(),
            Instructions::DDIV(instruction) => instruction.length(),
            Instructions::IREM(instruction) => instruction.length(),
            Instructions::LREM(instruction) => instruction.length(),
            Instructions::FREM(instruction) => instruction.length(),
            Instructions::DREM(instruction) => instruction.length(),
            Instructions::INEG(instruction) => instruction.length(),
            Instructions::LNEG(instruction) => instruction.length(),
            Instructions::FNEG(instruction) => instruction.length(),
            Instructions::DNEG(instruction) => instruction.length(),
            Instructions::ISHL(instruction) => instruction.length(),
            Instructions::LSHL(instruction) => instruction.length(),
            Instructions::ISHR(instruction) => instruction.length(),
            Instructions::LSHR(instruction) => instruction.length(),
            Instructions::IUSHR(instruction) => instruction.length(),
            Instructions::LUSHR(instruction) => instruction.length(),
            Instructions::IAND(instruction) => instruction.length(),
            Instructions::LAND(instruction) => instruction.length(),
            Instructions::IOR(instruction) => instruction.length(),
            Instructions::LOR(instruction) => instruction.length(),
            Instructions::IXOR(instruction) => instruction.length(),
            Instructions::LXOR(instruction) => instruction.length(),
            Instructions::IINC(instruction) => instruction.length(),
            Instructions::I2L(instruction) => instruction.length(),
            Instructions::I2F(instruction) => instruction.length(),
            Instructions::I2D(instruction) => instruction.length(),
            Instructions::L2I(instruction) => instruction.length(),
            Instructions::L2F(instruction) => instruction.length(),
            Instructions::L2D(instruction) => instruction.length(),
            Instructions::F2I(instruction) => instruction.length(),
            Instructions::F2L(instruction) => instruction.length(),
            Instructions::F2D(instruction) => instruction.length(),
            Instructions::D2I(instruction) => instruction.length(),
            Instructions::D2L(instruction) => instruction.length(),
            Instructions::D2F(instruction) => instruction.length(),
            Instructions::I2B(instruction) => instruction.length(),
            Instructions::I2C(instruction) => instruction.length(),
            Instructions::I2S(instruction) => instruction.length(),
            Instructions::LCMP(instruction) => instruction.length(),
            Instructions::FCMPL(instruction) => instruction.length(),
            Instructions::FCMPG(instruction) => instruction.length(),
            Instructions::DCMPL(instruction) => instruction.length(),
            Instructions::DCMPG(instruction) => instruction.length(),
            Instructions::IFEQ(instruction) => instruction.length(),
            Instructions::IFNE(instruction) => instruction.length(),
            Instructions::IFLT(instruction) => instruction.length(),
            Instructions::IFGE(instruction) => instruction.length(),
            Instructions::IFGT(instruction) => instruction.length(),
            Instructions::IFLE(instruction) => instruction.length(),
            Instructions::IF_ICMPEQ(instruction) => instruction.length(),
            Instructions::IF_ICMPNE(instruction) => instruction.length(),
            Instructions::IF_ICMPLT(instruction) => instruction.length(),
            Instructions::IF_ICMPGE(instruction) => instruction.length(),
            Instructions::IF_ICMPGT(instruction) => instruction.length(),
            Instructions::IF_ICMPLE(instruction) => instruction.length(),
            Instructions::IF_ACMPEQ(instruction) => instruction.length(),
            Instructions::IF_ACMPNE(instruction) => instruction.length(),
            Instructions::GOTO(instruction) => instruction.length(),
            Instructions::JSR(instruction) => instruction.length(),
            Instructions::RET(instruction) => instruction.length(),
            Instructions::TABLESWITCH(instruction) => instruction.length(),
            Instructions::LOOKUPSWITCH(instruction) => instruction.length(),
            Instructions::IRETURN(instruction) => instruction.length(),
            Instructions::LRETURN(instruction) => instruction.length(),
            Instructions::FRETURN(instruction) => instruction.length(),
            Instructions::DRETURN(instruction) => instruction.length(),
            Instructions::ARETURN(instruction) => instruction.length(),
            Instructions::RETURN(instruction) => instruction.length(),
            Instructions::GETSTATIC(instruction) => instruction.length(),
            Instructions::PUTSTATIC(instruction) => instruction.length(),
            Instructions::GETFIELD(instruction) => instruction.length(),
            Instructions::PUTFIELD(instruction) => instruction.length(),
            Instructions::INVOKEVIRTUAL(instruction) => instruction.length(),
            Instructions::INVOKESPECIAL(instruction) => instruction.length(),
            Instructions::INVOKESTATIC(instruction) => instruction.length(),
            Instructions::INVOKEINTERFACE(instruction) => instruction.length(),
            Instructions::INVOKEDYNAMIC(instruction) => instruction.length(),
            Instructions::NEW(instruction) => instruction.length(),
            Instructions::NEWARRAY(instruction) => instruction.length(),
            Instructions::ANEWARRAY(instruction) => instruction.length(),
            Instructions::ARRAYLENGTH(instruction) => instruction.length(),
            Instructions::ATHROW(instruction) => instruction.length(),
            Instructions::CHECKCAST(instruction) => instruction.length(),
            Instructions::INSTANCEOF(instruction) => instruction.length(),
            Instructions::MONITORENTER(instruction) => instruction.length(),
            Instructions::MONITOREXIT(instruction) => instruction.length(),
            Instructions::WIDE(instruction) => instruction.length(),
            Instructions::MULTIANEWARRAY(instruction) => instruction.length(),
            Instructions::IFNULL(instruction) => instruction.length(),
            Instructions::IFNONNULL(instruction) => instruction.length(),
            Instructions::GOTO_W(instruction) => instruction.length(),
            Instructions::JSR_W(instruction) => instruction.length(),
            Instructions::BREAKPOINT(instruction) => instruction.length(),
            Instructions::IMPDEP1(instruction) => instruction.length(),
            Instructions::IMPDEP2(instruction) => instruction.length(),
        }
    }
}