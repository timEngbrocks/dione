use crate::class_loader::parser::{Parser, U4, U2};

use self::{constants::nop::NOP, unimplemented_instructions::ACONST_NULL, unimplemented_instructions::ICONST_M1, unimplemented_instructions::ICONST_0, unimplemented_instructions::ICONST_1, unimplemented_instructions::ICONST_2, unimplemented_instructions::ICONST_3, unimplemented_instructions::ICONST_4, unimplemented_instructions::ICONST_5, unimplemented_instructions::LCONST_0, unimplemented_instructions::LCONST_1, unimplemented_instructions::FCONST_0, unimplemented_instructions::FCONST_1, unimplemented_instructions::FCONST_2, unimplemented_instructions::DCONST_0, unimplemented_instructions::DCONST_1, unimplemented_instructions::BIPUSH, unimplemented_instructions::SIPUSH, unimplemented_instructions::LDC, unimplemented_instructions::LDC_W, unimplemented_instructions::LDC2_W, unimplemented_instructions::ILOAD, unimplemented_instructions::LLOAD, unimplemented_instructions::FLOAD, unimplemented_instructions::DLOAD, unimplemented_instructions::ALOAD, unimplemented_instructions::ILOAD_0, unimplemented_instructions::ILOAD_1, unimplemented_instructions::ILOAD_2, unimplemented_instructions::ILOAD_3, unimplemented_instructions::LLOAD_0, unimplemented_instructions::LLOAD_1, unimplemented_instructions::LLOAD_2, unimplemented_instructions::LLOAD_3, unimplemented_instructions::FLOAD_0, unimplemented_instructions::FLOAD_1, unimplemented_instructions::FLOAD_2, unimplemented_instructions::FLOAD_3, unimplemented_instructions::DLOAD_0, unimplemented_instructions::DLOAD_1, unimplemented_instructions::DLOAD_2, unimplemented_instructions::DLOAD_3, unimplemented_instructions::ALOAD_0, unimplemented_instructions::ALOAD_1, unimplemented_instructions::ALOAD_2, unimplemented_instructions::ALOAD_3, unimplemented_instructions::IALOAD, unimplemented_instructions::LALOAD, unimplemented_instructions::FALOAD, unimplemented_instructions::DALOAD, unimplemented_instructions::AALOAD, unimplemented_instructions::BALOAD, unimplemented_instructions::CALOAD, unimplemented_instructions::SALOAD, unimplemented_instructions::ISTORE, unimplemented_instructions::LSTORE, unimplemented_instructions::FSTORE, unimplemented_instructions::DSTORE, unimplemented_instructions::ASTORE, unimplemented_instructions::ISTORE_0, unimplemented_instructions::ISTORE_1, unimplemented_instructions::ISTORE_2, unimplemented_instructions::ISTORE_3, unimplemented_instructions::LSTORE_0, unimplemented_instructions::LSTORE_1, unimplemented_instructions::LSTORE_2, unimplemented_instructions::LSTORE_3, unimplemented_instructions::FSTORE_0, unimplemented_instructions::FSTORE_1, unimplemented_instructions::FSTORE_2, unimplemented_instructions::FSTORE_3, unimplemented_instructions::DSTORE_0, unimplemented_instructions::DSTORE_1, unimplemented_instructions::DSTORE_2, unimplemented_instructions::DSTORE_3, unimplemented_instructions::ASTORE_0, unimplemented_instructions::ASTORE_1, unimplemented_instructions::ASTORE_2, unimplemented_instructions::ASTORE_3, unimplemented_instructions::IASTORE, unimplemented_instructions::LASTORE, unimplemented_instructions::FASTORE, unimplemented_instructions::DASTORE, unimplemented_instructions::AASTORE, unimplemented_instructions::BASTORE, unimplemented_instructions::CASTORE, unimplemented_instructions::SASTORE, unimplemented_instructions::POP, unimplemented_instructions::POP2, unimplemented_instructions::DUP, unimplemented_instructions::DUP_X1, unimplemented_instructions::DUP_X2, unimplemented_instructions::DUP2, unimplemented_instructions::DUP2_X1, unimplemented_instructions::DUP2_X2, unimplemented_instructions::SWAP, unimplemented_instructions::IADD, unimplemented_instructions::LADD, unimplemented_instructions::FADD, unimplemented_instructions::DADD, unimplemented_instructions::ISUB, unimplemented_instructions::LSUB, unimplemented_instructions::FSUB, unimplemented_instructions::DSUB, unimplemented_instructions::IMUL, unimplemented_instructions::LMUL, unimplemented_instructions::FMUL, unimplemented_instructions::DMUL, unimplemented_instructions::IDIV, unimplemented_instructions::LDIV, unimplemented_instructions::FDIV, unimplemented_instructions::DDIV, unimplemented_instructions::IREM, unimplemented_instructions::LREM, unimplemented_instructions::FREM, unimplemented_instructions::DREM, unimplemented_instructions::INEG, unimplemented_instructions::LNEG, unimplemented_instructions::FNEG, unimplemented_instructions::DNEG, unimplemented_instructions::ISHL, unimplemented_instructions::LSHL, unimplemented_instructions::ISHR, unimplemented_instructions::LSHR, unimplemented_instructions::IUSHR, unimplemented_instructions::LUSHR, unimplemented_instructions::IAND, unimplemented_instructions::LAND, unimplemented_instructions::IOR, unimplemented_instructions::LOR, unimplemented_instructions::IXOR, unimplemented_instructions::LXOR, unimplemented_instructions::IINC, unimplemented_instructions::I2L, unimplemented_instructions::I2F, unimplemented_instructions::I2D, unimplemented_instructions::L2I, unimplemented_instructions::L2F, unimplemented_instructions::L2D, unimplemented_instructions::F2I, unimplemented_instructions::F2L, unimplemented_instructions::F2D, unimplemented_instructions::D2I, unimplemented_instructions::D2L, unimplemented_instructions::D2F, unimplemented_instructions::I2B, unimplemented_instructions::I2C, unimplemented_instructions::I2S, unimplemented_instructions::LCMP, unimplemented_instructions::FCMPL, unimplemented_instructions::FCMPG, unimplemented_instructions::DCMPL, unimplemented_instructions::DCMPG, unimplemented_instructions::IFEQ, unimplemented_instructions::IFNE, unimplemented_instructions::IFLT, unimplemented_instructions::IFGE, unimplemented_instructions::IFGT, unimplemented_instructions::IFLE, unimplemented_instructions::IF_ICMPEQ, unimplemented_instructions::IF_ICMPNE, unimplemented_instructions::IF_ICMPLT, unimplemented_instructions::IF_ICMPGE, unimplemented_instructions::IF_ICMPGT, unimplemented_instructions::IF_ICMPLE, unimplemented_instructions::IF_ACMPEQ, unimplemented_instructions::IF_ACMPNE, unimplemented_instructions::GOTO, unimplemented_instructions::JSR, unimplemented_instructions::RET, unimplemented_instructions::TABLESWITCH, unimplemented_instructions::LOOKUPSWITCH, unimplemented_instructions::IRETURN, unimplemented_instructions::LRETURN, unimplemented_instructions::FRETURN, unimplemented_instructions::DRETURN, unimplemented_instructions::ARETURN, unimplemented_instructions::RETURN, unimplemented_instructions::WIDE, unimplemented_instructions::MULTIANEWARRAY, unimplemented_instructions::IFNULL, unimplemented_instructions::IFNONNULL, unimplemented_instructions::GOTO_W, unimplemented_instructions::JSR_W, unimplemented_instructions::BREAKPOINT, unimplemented_instructions::IMPDEP1, unimplemented_instructions::IMPDEP2};

use super::execution_context::ExecutionContext;

pub mod unimplemented_instructions;

pub mod constants;

pub trait Instruction {
    fn new(parser: &mut Parser) -> Self where Self: Sized;
    fn execute(&mut self, execution_context: &ExecutionContext);
    fn length(&self) -> U2;
}

pub struct InstructionStream {
    instructions: Vec<Instructions>,
    length: usize,
    execution_context: ExecutionContext,
    cursor: usize,
}

impl InstructionStream {
    pub fn new(parser: &mut Parser, length: U4, max_locals: U2, max_stack: U2) -> InstructionStream {
        let mut instructions = Vec::with_capacity(length as usize);
        let mut cursor = 0;
        while cursor < length {
            let instruction = Instructions::new(parser);
            cursor += instruction.length() as U4;
            instructions.push(instruction);
        }
        instructions.shrink_to_fit();
        let length = instructions.len();
        InstructionStream {
            instructions,
            length,
            execution_context: ExecutionContext::new(max_locals, max_stack),
            cursor: 0,
        }
    }

    pub fn has_next(&self) -> bool {
        self.cursor < self.length
    }

    pub fn next(&mut self) -> &ExecutionContext {
        if !self.has_next() {
            panic!("Error handling!");
        }
        self.instructions[self.cursor].execute(&self.execution_context);
        self.cursor += 1;
        &self.execution_context
    }

    pub fn absolute_jump(&mut self, index: usize) {
        if index >= self.length {
            panic!("Error handling!");
        }
        self.cursor = index;
    }

    pub fn relative_jump(&mut self, offset: usize) {
        self.absolute_jump(self.cursor + offset);
    }
}

#[repr(u8)]
#[allow(non_camel_case_types)]
pub enum Instructions {
    NOP(NOP),
    ACONST_NULL(ACONST_NULL),
    ICONST_M1(ICONST_M1),
    ICONST_0(ICONST_0),
    ICONST_1(ICONST_1),
    ICONST_2(ICONST_2),
    ICONST_3(ICONST_3),
    ICONST_4(ICONST_4),
    ICONST_5(ICONST_5),
    LCONST_0(LCONST_0),
    LCONST_1(LCONST_1),
    FCONST_0(FCONST_0),
    FCONST_1(FCONST_1),
    FCONST_2(FCONST_2),
    DCONST_0(DCONST_0),
    DCONST_1(DCONST_1),
    BIPUSH(BIPUSH),
    SIPUSH(SIPUSH),
    LDC(LDC),
    LDC_W(LDC_W),
    LDC2_W(LDC2_W),
    ILOAD(ILOAD),
    LLOAD(LLOAD),
    FLOAD(FLOAD),
    DLOAD(DLOAD),
    ALOAD(ALOAD),
    ILOAD_0(ILOAD_0),
    ILOAD_1(ILOAD_1),
    ILOAD_2(ILOAD_2),
    ILOAD_3(ILOAD_3),
    LLOAD_0(LLOAD_0),
    LLOAD_1(LLOAD_1),
    LLOAD_2(LLOAD_2),
    LLOAD_3(LLOAD_3),
    FLOAD_0(FLOAD_0),
    FLOAD_1(FLOAD_1),
    FLOAD_2(FLOAD_2),
    FLOAD_3(FLOAD_3),
    DLOAD_0(DLOAD_0),
    DLOAD_1(DLOAD_1),
    DLOAD_2(DLOAD_2),
    DLOAD_3(DLOAD_3),
    ALOAD_0(ALOAD_0),
    ALOAD_1(ALOAD_1),
    ALOAD_2(ALOAD_2),
    ALOAD_3(ALOAD_3),
    IALOAD(IALOAD),
    LALOAD(LALOAD),
    FALOAD(FALOAD),
    DALOAD(DALOAD),
    AALOAD(AALOAD),
    BALOAD(BALOAD),
    CALOAD(CALOAD),
    SALOAD(SALOAD),
    ISTORE(ISTORE),
    LSTORE(LSTORE),
    FSTORE(FSTORE),
    DSTORE(DSTORE),
    ASTORE(ASTORE),
    ISTORE_0(ISTORE_0),
    ISTORE_1(ISTORE_1),
    ISTORE_2(ISTORE_2),
    ISTORE_3(ISTORE_3),
    LSTORE_0(LSTORE_0),
    LSTORE_1(LSTORE_1),
    LSTORE_2(LSTORE_2),
    LSTORE_3(LSTORE_3),
    FSTORE_0(FSTORE_0),
    FSTORE_1(FSTORE_1),
    FSTORE_2(FSTORE_2),
    FSTORE_3(FSTORE_3),
    DSTORE_0(DSTORE_0),
    DSTORE_1(DSTORE_1),
    DSTORE_2(DSTORE_2),
    DSTORE_3(DSTORE_3),
    ASTORE_0(ASTORE_0),
    ASTORE_1(ASTORE_1),
    ASTORE_2(ASTORE_2),
    ASTORE_3(ASTORE_3),
    IASTORE(IASTORE),
    LASTORE(LASTORE),
    FASTORE(FASTORE),
    DASTORE(DASTORE),
    AASTORE(AASTORE),
    BASTORE(BASTORE),
    CASTORE(CASTORE),
    SASTORE(SASTORE),
    POP(POP),
    POP2(POP2),
    DUP(DUP),
    DUP_X1(DUP_X1),
    DUP_X2(DUP_X2),
    DUP2(DUP2),
    DUP2_X1(DUP2_X1),
    DUP2_X2(DUP2_X2),
    SWAP(SWAP),
    IADD(IADD),
    LADD(LADD),
    FADD(FADD),
    DADD(DADD),
    ISUB(ISUB),
    LSUB(LSUB),
    FSUB(FSUB),
    DSUB(DSUB),
    IMUL(IMUL),
    LMUL(LMUL),
    FMUL(FMUL),
    DMUL(DMUL),
    IDIV(IDIV),
    LDIV(LDIV),
    FDIV(FDIV),
    DDIV(DDIV),
    IREM(IREM),
    LREM(LREM),
    FREM(FREM),
    DREM(DREM),
    INEG(INEG),
    LNEG(LNEG),
    FNEG(FNEG),
    DNEG(DNEG),
    ISHL(ISHL),
    LSHL(LSHL),
    ISHR(ISHR),
    LSHR(LSHR),
    IUSHR(IUSHR),
    LUSHR(LUSHR),
    IAND(IAND),
    LAND(LAND),
    IOR(IOR),
    LOR(LOR),
    IXOR(IXOR),
    LXOR(LXOR),
    IINC(IINC),
    I2L(I2L),
    I2F(I2F),
    I2D(I2D),
    L2I(L2I),
    L2F(L2F),
    L2D(L2D),
    F2I(F2I),
    F2L(F2L),
    F2D(F2D),
    D2I(D2I),
    D2L(D2L),
    D2F(D2F),
    I2B(I2B),
    I2C(I2C),
    I2S(I2S),
    LCMP(LCMP),
    FCMPL(FCMPL),
    FCMPG(FCMPG),
    DCMPL(DCMPL),
    DCMPG(DCMPG),
    IFEQ(IFEQ),
    IFNE(IFNE),
    IFLT(IFLT),
    IFGE(IFGE),
    IFGT(IFGT),
    IFLE(IFLE),
    IF_ICMPEQ(IF_ICMPEQ),
    IF_ICMPNE(IF_ICMPNE),
    IF_ICMPLT(IF_ICMPLT),
    IF_ICMPGE(IF_ICMPGE),
    IF_ICMPGT(IF_ICMPGT),
    IF_ICMPLE(IF_ICMPLE),
    IF_ACMPEQ(IF_ACMPEQ),
    IF_ACMPNE(IF_ACMPNE),
    GOTO(GOTO),
    JSR(JSR),
    RET(RET),
    TABLESWITCH(TABLESWITCH),
    LOOKUPSWITCH(LOOKUPSWITCH),
    IRETURN(IRETURN),
    LRETURN(LRETURN),
    FRETURN(FRETURN),
    DRETURN(DRETURN),
    ARETURN(ARETURN),
    RETURN(RETURN),
    WIDE(WIDE),
    MULTIANEWARRAY(MULTIANEWARRAY),
    IFNULL(IFNULL),
    IFNONNULL(IFNONNULL),
    GOTO_W(GOTO_W),
    JSR_W(JSR_W),
    BREAKPOINT(BREAKPOINT),
    IMPDEP1(IMPDEP1),
    IMPDEP2(IMPDEP2),
}

impl Instruction for Instructions {
    fn new(parser: &mut Parser) -> Self where Self: Sized {
        let opcode = parser.peek_u1();
        match opcode {
            0x00 => Instructions::NOP(NOP::new(parser)),
            0x01 => Instructions::ACONST_NULL(ACONST_NULL::new(parser)),
            0x02 => Instructions::ICONST_M1(ICONST_M1::new(parser)),
            0x03 => Instructions::ICONST_0(ICONST_0::new(parser)),
            0x04 => Instructions::ICONST_1(ICONST_1::new(parser)),
            0x05 => Instructions::ICONST_2(ICONST_2::new(parser)),
            0x06 => Instructions::ICONST_3(ICONST_3::new(parser)),
            0x07 => Instructions::ICONST_4(ICONST_4::new(parser)),
            0x08 => Instructions::ICONST_5(ICONST_5::new(parser)),
            0x09 => Instructions::LCONST_0(LCONST_0::new(parser)),
            0x0a => Instructions::LCONST_1(LCONST_1::new(parser)),
            0x0b => Instructions::FCONST_0(FCONST_0::new(parser)),
            0x0c => Instructions::FCONST_1(FCONST_1::new(parser)),
            0x0d => Instructions::FCONST_2(FCONST_2::new(parser)),
            0x0e => Instructions::DCONST_0(DCONST_0::new(parser)),
            0x0f => Instructions::DCONST_1(DCONST_1::new(parser)),
            0x10 => Instructions::BIPUSH(BIPUSH::new(parser)),
            0x11 => Instructions::SIPUSH(SIPUSH::new(parser)),
            0x12 => Instructions::LDC(LDC::new(parser)),
            0x13 => Instructions::LDC_W(LDC_W::new(parser)),
            0x14 => Instructions::LDC2_W(LDC2_W::new(parser)),
            0x15 => Instructions::ILOAD(ILOAD::new(parser)),
            0x16 => Instructions::LLOAD(LLOAD::new(parser)),
            0x17 => Instructions::FLOAD(FLOAD::new(parser)),
            0x18 => Instructions::DLOAD(DLOAD::new(parser)),
            0x19 => Instructions::ALOAD(ALOAD::new(parser)),
            0x1a => Instructions::ILOAD_0(ILOAD_0::new(parser)),
            0x1b => Instructions::ILOAD_1(ILOAD_1::new(parser)),
            0x1c => Instructions::ILOAD_2(ILOAD_2::new(parser)),
            0x1d => Instructions::ILOAD_3(ILOAD_3::new(parser)),
            0x1e => Instructions::LLOAD_0(LLOAD_0::new(parser)),
            0x1f => Instructions::LLOAD_1(LLOAD_1::new(parser)),
            0x20 => Instructions::LLOAD_2(LLOAD_2::new(parser)),
            0x21 => Instructions::LLOAD_3(LLOAD_3::new(parser)),
            0x22 => Instructions::FLOAD_0(FLOAD_0::new(parser)),
            0x23 => Instructions::FLOAD_1(FLOAD_1::new(parser)),
            0x24 => Instructions::FLOAD_2(FLOAD_2::new(parser)),
            0x25 => Instructions::FLOAD_3(FLOAD_3::new(parser)),
            0x26 => Instructions::DLOAD_0(DLOAD_0::new(parser)),
            0x27 => Instructions::DLOAD_1(DLOAD_1::new(parser)),
            0x28 => Instructions::DLOAD_2(DLOAD_2::new(parser)),
            0x29 => Instructions::DLOAD_3(DLOAD_3::new(parser)),
            0x2a => Instructions::ALOAD_0(ALOAD_0::new(parser)),
            0x2b => Instructions::ALOAD_1(ALOAD_1::new(parser)),
            0x2c => Instructions::ALOAD_2(ALOAD_2::new(parser)),
            0x2d => Instructions::ALOAD_3(ALOAD_3::new(parser)),
            0x2e => Instructions::IALOAD(IALOAD::new(parser)),
            0x2f => Instructions::LALOAD(LALOAD::new(parser)),
            0x30 => Instructions::FALOAD(FALOAD::new(parser)),
            0x31 => Instructions::DALOAD(DALOAD::new(parser)),
            0x32 => Instructions::AALOAD(AALOAD::new(parser)),
            0x33 => Instructions::BALOAD(BALOAD::new(parser)),
            0x34 => Instructions::CALOAD(CALOAD::new(parser)),
            0x35 => Instructions::SALOAD(SALOAD::new(parser)),
            0x36 => Instructions::ISTORE(ISTORE::new(parser)),
            0x37 => Instructions::LSTORE(LSTORE::new(parser)),
            0x38 => Instructions::FSTORE(FSTORE::new(parser)),
            0x39 => Instructions::DSTORE(DSTORE::new(parser)),
            0x3a => Instructions::ASTORE(ASTORE::new(parser)),
            0x3b => Instructions::ISTORE_0(ISTORE_0::new(parser)),
            0x3c => Instructions::ISTORE_1(ISTORE_1::new(parser)),
            0x3d => Instructions::ISTORE_2(ISTORE_2::new(parser)),
            0x3e => Instructions::ISTORE_3(ISTORE_3::new(parser)),
            0x3f => Instructions::LSTORE_0(LSTORE_0::new(parser)),
            0x40 => Instructions::LSTORE_1(LSTORE_1::new(parser)),
            0x41 => Instructions::LSTORE_2(LSTORE_2::new(parser)),
            0x42 => Instructions::LSTORE_3(LSTORE_3::new(parser)),
            0x43 => Instructions::FSTORE_0(FSTORE_0::new(parser)),
            0x44 => Instructions::FSTORE_1(FSTORE_1::new(parser)),
            0x45 => Instructions::FSTORE_2(FSTORE_2::new(parser)),
            0x46 => Instructions::FSTORE_3(FSTORE_3::new(parser)),
            0x47 => Instructions::DSTORE_0(DSTORE_0::new(parser)),
            0x48 => Instructions::DSTORE_1(DSTORE_1::new(parser)),
            0x49 => Instructions::DSTORE_2(DSTORE_2::new(parser)),
            0x4a => Instructions::DSTORE_3(DSTORE_3::new(parser)),
            0x4b => Instructions::ASTORE_0(ASTORE_0::new(parser)),
            0x4c => Instructions::ASTORE_1(ASTORE_1::new(parser)),
            0x4d => Instructions::ASTORE_2(ASTORE_2::new(parser)),
            0x4e => Instructions::ASTORE_3(ASTORE_3::new(parser)),
            0x4f => Instructions::IASTORE(IASTORE::new(parser)),
            0x50 => Instructions::LASTORE(LASTORE::new(parser)),
            0x51 => Instructions::FASTORE(FASTORE::new(parser)),
            0x52 => Instructions::DASTORE(DASTORE::new(parser)),
            0x53 => Instructions::AASTORE(AASTORE::new(parser)),
            0x54 => Instructions::BASTORE(BASTORE::new(parser)),
            0x55 => Instructions::CASTORE(CASTORE::new(parser)),
            0x56 => Instructions::SASTORE(SASTORE::new(parser)),
            0x57 => Instructions::POP(POP::new(parser)),
            0x58 => Instructions::POP2(POP2::new(parser)),
            0x59 => Instructions::DUP(DUP::new(parser)),
            0x5a => Instructions::DUP_X1(DUP_X1::new(parser)),
            0x5b => Instructions::DUP_X2(DUP_X2::new(parser)),
            0x5c => Instructions::DUP2(DUP2::new(parser)),
            0x5d => Instructions::DUP2_X1(DUP2_X1::new(parser)),
            0x5e => Instructions::DUP2_X2(DUP2_X2::new(parser)),
            0x5f => Instructions::SWAP(SWAP::new(parser)),
            0x60 => Instructions::IADD(IADD::new(parser)),
            0x61 => Instructions::LADD(LADD::new(parser)),
            0x62 => Instructions::FADD(FADD::new(parser)),
            0x63 => Instructions::DADD(DADD::new(parser)),
            0x64 => Instructions::ISUB(ISUB::new(parser)),
            0x65 => Instructions::LSUB(LSUB::new(parser)),
            0x66 => Instructions::FSUB(FSUB::new(parser)),
            0x67 => Instructions::DSUB(DSUB::new(parser)),
            0x68 => Instructions::IMUL(IMUL::new(parser)),
            0x69 => Instructions::LMUL(LMUL::new(parser)),
            0x6a => Instructions::FMUL(FMUL::new(parser)),
            0x6b => Instructions::DMUL(DMUL::new(parser)),
            0x6c => Instructions::IDIV(IDIV::new(parser)),
            0x6d => Instructions::LDIV(LDIV::new(parser)),
            0x6e => Instructions::FDIV(FDIV::new(parser)),
            0x6f => Instructions::DDIV(DDIV::new(parser)),
            0x70 => Instructions::IREM(IREM::new(parser)),
            0x71 => Instructions::LREM(LREM::new(parser)),
            0x72 => Instructions::FREM(FREM::new(parser)),
            0x73 => Instructions::DREM(DREM::new(parser)),
            0x74 => Instructions::INEG(INEG::new(parser)),
            0x75 => Instructions::LNEG(LNEG::new(parser)),
            0x76 => Instructions::FNEG(FNEG::new(parser)),
            0x77 => Instructions::DNEG(DNEG::new(parser)),
            0x78 => Instructions::ISHL(ISHL::new(parser)),
            0x79 => Instructions::LSHL(LSHL::new(parser)),
            0x7a => Instructions::ISHR(ISHR::new(parser)),
            0x7b => Instructions::LSHR(LSHR::new(parser)),
            0x7c => Instructions::IUSHR(IUSHR::new(parser)),
            0x7d => Instructions::LUSHR(LUSHR::new(parser)),
            0x7e => Instructions::IAND(IAND::new(parser)),
            0x7f => Instructions::LAND(LAND::new(parser)),
            0x80 => Instructions::IOR(IOR::new(parser)),
            0x81 => Instructions::LOR(LOR::new(parser)),
            0x82 => Instructions::IXOR(IXOR::new(parser)),
            0x83 => Instructions::LXOR(LXOR::new(parser)),
            0x84 => Instructions::IINC(IINC::new(parser)),
            0x85 => Instructions::I2L(I2L::new(parser)),
            0x86 => Instructions::I2F(I2F::new(parser)),
            0x87 => Instructions::I2D(I2D::new(parser)),
            0x88 => Instructions::L2I(L2I::new(parser)),
            0x89 => Instructions::L2F(L2F::new(parser)),
            0x8a => Instructions::L2D(L2D::new(parser)),
            0x8b => Instructions::F2I(F2I::new(parser)),
            0x8c => Instructions::F2L(F2L::new(parser)),
            0x8d => Instructions::F2D(F2D::new(parser)),
            0x8e => Instructions::D2I(D2I::new(parser)),
            0x8f => Instructions::D2L(D2L::new(parser)),
            0x90 => Instructions::D2F(D2F::new(parser)),
            0x91 => Instructions::I2B(I2B::new(parser)),
            0x92 => Instructions::I2C(I2C::new(parser)),
            0x93 => Instructions::I2S(I2S::new(parser)),
            0x94 => Instructions::LCMP(LCMP::new(parser)),
            0x95 => Instructions::FCMPL(FCMPL::new(parser)),
            0x96 => Instructions::FCMPG(FCMPG::new(parser)),
            0x97 => Instructions::DCMPL(DCMPL::new(parser)),
            0x98 => Instructions::DCMPG(DCMPG::new(parser)),
            0x99 => Instructions::IFEQ(IFEQ::new(parser)),
            0x9a => Instructions::IFNE(IFNE::new(parser)),
            0x9b => Instructions::IFLT(IFLT::new(parser)),
            0x9c => Instructions::IFGE(IFGE::new(parser)),
            0x9d => Instructions::IFGT(IFGT::new(parser)),
            0x9e => Instructions::IFLE(IFLE::new(parser)),
            0x9f => Instructions::IF_ICMPEQ(IF_ICMPEQ::new(parser)),
            0xa0 => Instructions::IF_ICMPNE(IF_ICMPNE::new(parser)),
            0xa1 => Instructions::IF_ICMPLT(IF_ICMPLT::new(parser)),
            0xa2 => Instructions::IF_ICMPGE(IF_ICMPGE::new(parser)),
            0xa3 => Instructions::IF_ICMPGT(IF_ICMPGT::new(parser)),
            0xa4 => Instructions::IF_ICMPLE(IF_ICMPLE::new(parser)),
            0xa5 => Instructions::IF_ACMPEQ(IF_ACMPEQ::new(parser)),
            0xa6 => Instructions::IF_ACMPNE(IF_ACMPNE::new(parser)),
            0xa7 => Instructions::GOTO(GOTO::new(parser)),
            0xa8 => Instructions::JSR(JSR::new(parser)),
            0xa9 => Instructions::RET(RET::new(parser)),
            0xaa => Instructions::TABLESWITCH(TABLESWITCH::new(parser)),
            0xab => Instructions::LOOKUPSWITCH(LOOKUPSWITCH::new(parser)),
            0xac => Instructions::IRETURN(IRETURN::new(parser)),
            0xad => Instructions::LRETURN(LRETURN::new(parser)),
            0xae => Instructions::FRETURN(FRETURN::new(parser)),
            0xaf => Instructions::DRETURN(DRETURN::new(parser)),
            0xb0 => Instructions::ARETURN(ARETURN::new(parser)),
            0xb1 => Instructions::RETURN(RETURN::new(parser)),
            0xc4 => Instructions::WIDE(WIDE::new(parser)),
            0xc5 => Instructions::MULTIANEWARRAY(MULTIANEWARRAY::new(parser)),
            0xc6 => Instructions::IFNULL(IFNULL::new(parser)),
            0xc7 => Instructions::IFNONNULL(IFNONNULL::new(parser)),
            0xc8 => Instructions::GOTO_W(GOTO_W::new(parser)),
            0xc9 => Instructions::JSR_W(JSR_W::new(parser)),
            0xca => Instructions::BREAKPOINT(BREAKPOINT::new(parser)),
            0xfe => Instructions::IMPDEP1(IMPDEP1::new(parser)),
            0xff => Instructions::IMPDEP2(IMPDEP2::new(parser)),
            v => panic!("Unknown opcode: {v}")
        }
    }

    fn execute(&mut self, execution_context: &ExecutionContext) {
        (self as &mut dyn Instruction).execute(execution_context);
    }

    fn length(&self) -> U2 {
        (self as &dyn Instruction).length()
    }
}